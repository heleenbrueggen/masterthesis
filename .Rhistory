BART_fit$yhat.test.mean
BART_fit$yhat.test.mean %>% as.numeric()
BART_fit$yhat.test.mean %>%
BART_fit$yhat.test.mean %>%
dgf
# plotting y against predicted y from BART
pred <- tibble(y = simdata[[1]]$y,
ypred = BART_fit$yhat.train.mean)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_density(alpha = .8)
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'maroon', fill = 'maroon', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none', fill = 'none')
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'blue', fill = 'blue', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none', fill = 'none')
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'blue', fill = 'blue', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none', fill = 'none')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon') +
geom_rug()
?geom_rug
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink3', fill = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon') +
geom_rug(color = 'deeppink')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon') +
geom_rug(color = 'deeppink')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'slateblue') +
geom_rug(color = 'royalblue')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = 1) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = 1, alpha = .7) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5, alpha = .7) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', size = .5)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .5)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .2)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .1)
install.packages('rstream')
instal.packa
install.packages('bartMachine')
library(bartMachine)
###################
# Simulation data #
###################
#############
# Libraries #
#############
library(tidyverse)
library(dplyr)
library(magrittr)
library(psych)
library(mvtnorm)
library(lme4)
library(lmerTest)
library(jtools)
library(purrr)
library(tibble)
################
# Setting seed #
################
set.seed(123)
###############################
# Simulating multilevel data  #
###############################
###############################################
# Function for calculating the variance of u0 #
###############################################
var.u0 <- function(varu0,
g00,
g01, g02, g11, g21, g32,
g10, g20, g30, g40, g50, g60, g70,
z1, z2,
x1, x2, x3, x4, x5, x6, x7,
u1, u2, u3, u4, u5, u6,
eij,
icc) {
daticc <- icc - ((var(g00 + g01 * z1 + g02 * z2) + varu0) / (var(g00 + g01 * z1 + g02 * z2) + varu0 +
var((g10 + g11 * z1 + u1)*x1) +
var((g20 + g21 * z1 + u2)*x2) +
var((g30 + g32 * z2 + u3)*x3) +
var((g40 + u4)*x4) +
var((g50 + u5)*x5) +
var((g60 + u6)*x6) +
var(g70*x7) + var(eij)))
return(daticc)
}
#######################
# Defining parameters #
#######################
ngroups <- c(30, 50)
groupsizes <- c(5, 15, 35, 50)
iccs <- c(0, .05, .3, .5)
mar_mcar <- c(0, 25, 50)
g <- c(.2, .5, .8)
combinations <- expand.grid(ngroup = ngroups,
groupsize = groupsizes,
icc = iccs,
mar_mcar = mar_mcar,
g = g)
###################
# Simulating data #
###################
simdatasets <- list()
for (i in 1:nrow(combinations)) {
ngroup <- combinations$ngroup[i]
groupsize <- combinations$groupsize[i]
icc <- combinations$icc[i]
# Overall intercept
g00 = 10
# Individual effects
g10 = combinations$g[i]
g20 = combinations$g[i]
g30 = combinations$g[i]
g40 = combinations$g[i]
g50 = combinations$g[i]
g60 = combinations$g[i]
g70 = combinations$g[i]
if (icc != 0)
{g01 = .5; g02 = .5; g11 = .35; g21 = .35; g32 = .35}
else
{g01 = 0; g02 = 0; g11 = 0; g21 = 0; g32 = 0}
simdata <- replicate(n = 100,
expr = tibble(
# individual id
id = 1:(ngroup * groupsize),
# group id
group = rep(1:ngroup, each = groupsize),
# residual variance
eij = rnorm(n = ngroup * groupsize, mean = 0, sd = 5),
# level 1 variables
x1 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2.5),
x2 = rnorm(n = ngroup * groupsize, mean = 0, sd = 3),
x3 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2),
x4 = rnorm(n = ngroup * groupsize, mean = 0, sd = 3.4),
x5 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2),
x6 = rnorm(n = ngroup * groupsize, mean = 0, sd = 1.5),
x7 = rnorm(n = ngroup * groupsize, mean = 0, sd = 4.4),
# level 2 variables
z1 = rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize),
z2 = rep(rnorm(n = ngroup, mean = 0, sd = 1.6), each = groupsize),
# random slopes
u6 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u5 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u4 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u3 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u2 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u1 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u0 = if (icc != 0) {rep(rnorm(n = ngroup,
mean = 0,
sd = uniroot(var.u0,
interval = c(0, 100),
tol = .000001,
extendInt = 'yes',
maxiter = 1000,
g00=g00,
g01=g01, g02= g02, g11=g11, g21=g21, g32=g32,
g10=g10, g20=g20, g30=g30, g40=g40, g50=g50, g60=g60, g70=g70,
z1=z1, z2=z2,
x1=x1, x2=x2, x3=x3, x4=x4, x5=x5, x6=x6, x7=x7,
u1=u1, u2=u2, u3=u3, u4=u4, u5=u5, u6=u6,
eij=eij,
icc=icc)$root %>% sqrt()), each = groupsize)} else {rep(0, (ngroup * groupsize))},
# coefficient generation (including random slopes and cross-level interactions)
beta0j = g00 + g01 * z1 + g02 * z2 + u0,
beta1j = g10 + g11 * z1 + u1,
beta2j = g20 + g21 * z1 + u2,
beta3j = g30 + g32 * z2 + u3,
beta4j = g40 + u4,
beta5j = g50 + u5,
beta6j = g60 + u6,
beta7j = g70,
# generation of dependent variable y
y = beta0j + beta1j * x1 + beta2j * x2 + beta3j * x3 + beta4j * x4 + beta5j * x5 + beta6j * x6 * beta7j * x7 + eij) %>%
# taking out terms that are only used for model generation
select(-u0, -u1, -u2, -u3, -u4, -u5, -u6, -eij, -beta0j, -beta1j, -beta2j, -beta3j, -beta4j, -beta5j, -beta6j, -beta7j),
simplify = FALSE)
name <- paste('simdata', colnames(combinations)[1], combinations[i,1], colnames(combinations)[2], combinations[i,2], colnames(combinations)[3], combinations[i,3], colnames(combinations)[4], combinations[i,4], colnames(combinations)[5], combinations[i,5], sep = '_')
simdatasets[[name]] <- simdata
}
###############
# Saving data #
###############
save(simdatasets, file = '/data/simdatasets.RData')
###############
# Saving data #
###############
save(simdatasets, file = 'data/simdatasets.RData')
View(simdatasets)
###############
# Saving data #
###############
save(simdatasets, file = 'data/simdatasets.Rdata')
###############
# Saving data #
###############
save(simdatasets, file = 'data/simdatasets.Rdata')
R.version
RStudio.Version()
RStudio.Version()
RStudio.Version()
R.version
library(tidyverse)
library(dplyr)
library(magrittr)
library(psych)
library(mvtnorm)
library(lme4)
library(lmerTest)
library(jtools)
library(purrr)
library(tibble)
################
# Setting seed #
################
set.seed(123)
###############################
# Simulating multilevel data  #
###############################
###############################################
# Function for calculating the variance of u0 #
###############################################
var.u0 <- function(varu0,
g00,
g01, g02, g11, g21, g32,
g10, g20, g30, g40, g50, g60, g70,
z1, z2,
x1, x2, x3, x4, x5, x6, x7,
u1, u2, u3, u4, u5, u6,
eij,
icc) {
daticc <- icc - ((var(g00 + g01 * z1 + g02 * z2) + varu0) / (var(g00 + g01 * z1 + g02 * z2) + varu0 +
var((g10 + g11 * z1 + u1)*x1) +
var((g20 + g21 * z1 + u2)*x2) +
var((g30 + g32 * z2 + u3)*x3) +
var((g40 + u4)*x4) +
var((g50 + u5)*x5) +
var((g60 + u6)*x6) +
var(g70*x7) + var(eij)))
return(daticc)
}
#######################
# Defining parameters #
#######################
ngroups <- c(30, 50)
groupsizes <- c(5, 15, 35, 50)
iccs <- c(0, .05, .3, .5)
mar_mcar <- c(0, 25, 50)
g <- c(.2, .5, .8)
combinations <- expand.grid(ngroup = ngroups,
groupsize = groupsizes,
icc = iccs,
mar_mcar = mar_mcar,
g = g)
###################
# Simulating data #
###################
simdatasets <- list()
for (i in 1:nrow(combinations)) {
ngroup <- combinations$ngroup[i]
groupsize <- combinations$groupsize[i]
icc <- combinations$icc[i]
# Overall intercept
g00 = 10
# Individual effects
g10 = combinations$g[i]
g20 = combinations$g[i]
g30 = combinations$g[i]
g40 = combinations$g[i]
g50 = combinations$g[i]
g60 = combinations$g[i]
g70 = combinations$g[i]
if (icc != 0)
{g01 = .5; g02 = .5; g11 = .35; g21 = .35; g32 = .35}
else
{g01 = 0; g02 = 0; g11 = 0; g21 = 0; g32 = 0}
simdata <- replicate(n = 1,
expr = tibble(
# individual id
id = 1:(ngroup * groupsize),
# group id
group = rep(1:ngroup, each = groupsize),
# residual variance
eij = rnorm(n = ngroup * groupsize, mean = 0, sd = 5),
# level 1 variables
x1 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2.5),
x2 = rnorm(n = ngroup * groupsize, mean = 0, sd = 3),
x3 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2),
x4 = rnorm(n = ngroup * groupsize, mean = 0, sd = 3.4),
x5 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2),
x6 = rnorm(n = ngroup * groupsize, mean = 0, sd = 1.5),
x7 = rnorm(n = ngroup * groupsize, mean = 0, sd = 4.4),
# level 2 variables
z1 = rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize),
z2 = rep(rnorm(n = ngroup, mean = 0, sd = 1.6), each = groupsize),
# random slopes
u6 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u5 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u4 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u3 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u2 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u1 = if (icc != 0) {rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize)} else {rep(0, (ngroup * groupsize))},
u0 = if (icc != 0) {rep(rnorm(n = ngroup,
mean = 0,
sd = uniroot(var.u0,
interval = c(0, 100),
tol = .000001,
extendInt = 'yes',
maxiter = 1000,
g00=g00,
g01=g01, g02= g02, g11=g11, g21=g21, g32=g32,
g10=g10, g20=g20, g30=g30, g40=g40, g50=g50, g60=g60, g70=g70,
z1=z1, z2=z2,
x1=x1, x2=x2, x3=x3, x4=x4, x5=x5, x6=x6, x7=x7,
u1=u1, u2=u2, u3=u3, u4=u4, u5=u5, u6=u6,
eij=eij,
icc=icc)$root %>% sqrt()), each = groupsize)} else {rep(0, (ngroup * groupsize))},
# coefficient generation (including random slopes and cross-level interactions)
beta0j = g00 + g01 * z1 + g02 * z2 + u0,
beta1j = g10 + g11 * z1 + u1,
beta2j = g20 + g21 * z1 + u2,
beta3j = g30 + g32 * z2 + u3,
beta4j = g40 + u4,
beta5j = g50 + u5,
beta6j = g60 + u6,
beta7j = g70,
# generation of dependent variable y
y = beta0j + beta1j * x1 + beta2j * x2 + beta3j * x3 + beta4j * x4 + beta5j * x5 + beta6j * x6 * beta7j * x7 + eij) %>%
# taking out terms that are only used for model generation
select(-u0, -u1, -u2, -u3, -u4, -u5, -u6, -eij, -beta0j, -beta1j, -beta2j, -beta3j, -beta4j, -beta5j, -beta6j, -beta7j),
simplify = FALSE)
name <- paste('simdata', colnames(combinations)[1], combinations[i,1], colnames(combinations)[2], combinations[i,2], colnames(combinations)[3], combinations[i,3], colnames(combinations)[4], combinations[i,4], colnames(combinations)[5], combinations[i,5], sep = '_')
simdatasets[[name]] <- simdata
}
View(simdata)
#####################
# stan4bart package #
#####################
stan4bart_fit <- stan4bart(y ~ bart(. -group -id -x1 -x2 -x3) + (1 + x1 + x2 + x3|group),
data = simdatasets$simdata_ngroup_30_groupsize_5_icc_0.5_mar_mcar_0_g_0.2[[1]])
library(stan4bart)
library(BART)
library(dbarts)
library(bartMachine)
library(bartMan)
library(tidyverse)
library(ggplot2)
library(magrittr)
################
# Setting seed #
################
set.seed(123)
#####################
# stan4bart package #
#####################
stan4bart_fit <- stan4bart(y ~ bart(. -group -id -x1 -x2 -x3) + (1 + x1 + x2 + x3|group),
data = simdatasets$simdata_ngroup_30_groupsize_5_icc_0.5_mar_mcar_0_g_0.2[[1]])
fitted(stan4bart_fit, type = 'ranef', sample = 'train')
fitted(stan4bart_fit, type = 'indiv.bart', sample = 'train')
fitted(stan4bart_fit, type = 'indiv.ranef', sample = 'train')
# plotting y against predicted y from stan4bart
pred <- tibble(y = simdatasets$simdata_ngroup_30_groupsize_5_icc_0.5_mar_mcar_0_g_0.2[[1]]$y,
ypred = fitted(stan4bart_fit, type = 'ev', sample = 'train'))
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .1)
##################
# dbarts package #
##################
dbarts_fit <- rbart_vi(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2,
group.by = group,
data = simdatasets$simdata_ngroup_30_groupsize_5_icc_0.5_mar_mcar_0_g_0.2[[1]],
keepTrees = TRUE,
verbose = FALSE)
# Convergence
plot(dbarts_fit)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .1)
# plotting y against predicted y from dbarts
pred <- tibble(y = simdatasets$simdata_ngroup_30_groupsize_5_icc_0.5_mar_mcar_0_g_0.2[[1]]$y,
ypred = fitted(dbarts_fit, type = 'ev', sample = 'train'))
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .1)
################
# BART package #
################
BART_fit <- wbart(x.train = simdatasets$simdata_ngroup_30_groupsize_5_icc_0.5_mar_mcar_0_g_0.2[[1]][,3:11] %>% as.matrix(), y.train = simdatasets$simdata_ngroup_30_groupsize_5_icc_0.5_mar_mcar_0_g_0.2[[1]]$y)
# plotting y against predicted y from BART
pred <- tibble(y = simdatasets$simdata_ngroup_30_groupsize_5_icc_0.5_mar_mcar_0_g_0.2[[1]]$y,
ypred = BART_fit$yhat.train.mean)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .1)
View(stan4bart_fit)
stan4bart_fit[["bartData"]]@x
fitted(dbarts_fit, type = 'ranef', sample = 'train')
fitted(dbarts_fit, type = 'bart', sample = 'train')
