################
# lme4 package #
################
lme4_fit <- lmer(y ~ y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]])
is.data.frame(simdata[[1]])
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]])
#####
# Simulation complicated model with 7 variables first level, 3 second level
#####
simdata <- replicate(n = 1000,
expr = tibble(
# individual id
id = 1:(ngroup * groupsize),
# group id
group = rep(1:ngroup, each = groupsize),
# residual variance
eij = rnorm(n = ngroup * groupsize, mean = 0, sd = 5),
# level 1 variables
x1 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2.5),
x2 = rnorm(n = ngroup * groupsize, mean = 0, sd = 3),
x3 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2),
x4 = rnorm(n = ngroup * groupsize, mean = 0, sd = 3.4),
x5 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2),
x6 = rnorm(n = ngroup * groupsize, mean = 0, sd = 1.5),
x7 = rnorm(n = ngroup * groupsize, mean = 0, sd = 2.3),
# level 2 variables
z1 = rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize),
z2 = rep(rnorm(n = ngroup, mean = 0, sd = 1.6), each = groupsize),
# random slopes
u6 = rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize),
u5 = rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize),
u4 = rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize),
u3 = rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize),
u2 = rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize),
u1 = rep(rnorm(n = ngroup, mean = 0, sd = 1), each = groupsize),
u0 = rep(rnorm(n = ngroup,
mean = 0,
sd = uniroot(function(varu0, g00, g01, g11, g20, g21, g30, g32, g40, g50, g60, g70, z1, z2, x1, x2, x3, x4, x5, x6, x7, eij, icc) {
daticc <- (icc - ((var(g00 + g01 * z1) + varu0) / (var(g00 + g01 * z1) + varu0 +
var((g10 + g11 * z1 + u1)*x1) +
var((g20 + g21 * z1 + u2)*x2) +
var((g30 + g32 * z2 + u3)*x3) +
var((g40 + u4)*x4) +
var((g50 + u5)*x5) +
var((g60 + u6)*x6) +
var(g70*x7) + var(eij))))
return(daticc)
}, interval = c(0, 100),
tol = .0001,
extendInt = 'yes',
maxiter = 1000, g00=g00, g01=g01, g11=g11, g20=g20, g21=g21, g30=g30, g32=g32, g40=g40, g50=g50, g60=g60, g70=g70, z1=z1, z2=z2, x1=x1, x2=x2, x3=x3, x4=x4, x5=x5, x6=x6, x7=x7, eij=eij, icc=icc)$root %>% as.numeric() %>% sqrt()), each = groupsize),
# coefficient generation (including random slopes and cross-level interactions)
beta0j = g00 + g01 * z1 + u0,
beta1j = g10 + g11 * z1 + u1,
beta2j = g20 + g21 * z1 + u2,
beta3j = g30 + g32 * z2 + u3,
beta4j = g40 + u4,
beta5j = g50 + u5,
beta6j = g60 + u6,
beta7j = g70,
# generation of dependent variable y
y = beta0j + beta1j * x1 + beta2j * x2 + beta3j * x3 + beta4j * x4 + beta5j * x5 + beta6j * x6 * beta7j * x7 + eij) %>%
# taking out terms that are only used for model generation
select(-u0, -u1, -u2, -u3, -u4, -u5, -u6, -eij, -beta0j, -beta1j, -beta2j, -beta3j, -beta4j, -beta5j, -beta6j, -beta7j),
simplify = FALSE)
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]])
#####################
# stan4bart package #
#####################
stan4bart(y ~ bart(z1*(x1 + x2) + x3*z2 + x4 + x5 + x6 + x7) + (x1|group) + (x2|group) + (x3|group), data = simdata[[1]])
##################
# dbarts package #
##################
dbarts_fit <- rbart_vi(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2, group.by = group, data = simdata[[1]])
summary(dbarts_fit)
View(dbarts_fit)
dbarts_fit$yhat.train.mean
?rbarts_vi
?rbart_vi
dbarts_fit$ranef
dbarts_fit$ranef.mean
View(dbarts_fit)
dbarts_fit[["fit"]][[1]]
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]])
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = c(.5, .5))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = c(.5, .5, .5))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = matrix(c(0.5, 0.5, 0.5), ncol = 1))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(group = matrix(c(0.5, 0.5, 0.5), ncol = 1)))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(x1 = matrix(c(0.5, 0.5, 0.5), ncol = 1)))
?lmer
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(theta = matrix(c(0.5, 0.5, 0.5), ncol = 1)))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(theta = matrix(c(0.5, 0.5, 0.5,
.5, .5, .5,
.5, .5, ,.5), ncol = 3)))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(theta = matrix(c(.5, .5, .5, .5, .5, .5, .5, .5, .5), ncol = 3)))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(theta = matrix(c(rep(1, 9)), ncol = 3)))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(theta = matrix(c(rep(5, 9)), ncol = 3)))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(theta = matrix(c(rep(3, 9)), ncol = 3)))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(theta = matrix(c(rep(0, 9)), ncol = 3)))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(theta = matrix(c(rep(0.2, 9)), ncol = 3)))
################
# lme4 package #
################
lme4_fit <- lmer(y ~ 1 + x1 + x2 + x3 + x4 + x5 + x6 + x7 + z1 + z2 + x1*z1 + x2*z1 + x3*z2 + (x1|group) + (x2|group) + (x3|group), REML = FALSE, data = simdata[[1]], start = list(theta = matrix(c(rep(0, 9)), ncol = 3)))
View(simdata)
################
# BART package #
################
BART_fit <- wbart(x.train = simdata[[1]][,3:11] %>% as.matrix(), y.train = simdata[[1]]$y)
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) + geom_point()
?geom_hline
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_point() +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'hotpink')
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_point(color = 'darkorchid') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'deeppink')
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_point(color = 'deepskyblue') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'deeppink')
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_point(color = 'hotpink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'deeppink')
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'deeppink4')
for(i in 1:1000) {
iccvalue[i] <- iccfunction(simdata[[i]])
}
mean(iccvalue)
# plotting y against predicted y from BART
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'deeppink4')
View(BART_fit)
BART_fit[["yhat.train"]]
plot(BART_fit)
summary(dbarts_fit)
plot(dbarts_fit)
extract(dbarts_fit)
extract(dbarts_fit, type = trees)
extract(dbarts_fit, type = 'trees')
extract(dbarts_fit, type = 'bart')
extract(dbarts_fit, type = 'ppd')
extract(dbarts_fit, type = 'trees')
################
# BART package #
################
BART_fit <- mc.wbart(x.train = simdata[[1]][,3:11] %>% as.matrix(), y.train = simdata[[1]]$y)
library(BART)
################
# BART package #
################
BART_fit <- mc.wbart(x.train = simdata[[1]][,3:11] %>% as.matrix(), y.train = simdata[[1]]$y)
library(stan4bart)
library(BART)
library(lme4)
library(dbarts)
################
# BART package #
################
BART_fit <- mc.wbart(x.train = simdata[[1]][,3:11] %>% as.matrix(), y.train = simdata[[1]]$y)
library(tidyverse)
################
# BART package #
################
BART_fit <- mc.wbart(x.train = simdata[[1]][,3:11] %>% as.matrix(), y.train = simdata[[1]]$y)
View(BART_fit)
BART_fit[["treedraws"]][["trees"]]
BART_fit[["treedraws"]][["cutpoints"]]
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_density(x = BART_fit$yhat.train.mean, color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'deeppink4')
library(ggplot2)
?geom_density
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'deeppink4', alpha = .8))
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'deeppink4', fill = 'deeppink4', alpha = .8)) +
theme_minimal()
?theme_minimal
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'deeppink4', fill = 'deeppink4', alpha = .8)) +
theme_minimal(legend = FALSE)
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'deeppink4', fill = 'deeppink4', alpha = .8)) +
theme_minimal(legend.position = 'none')
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'deeppink4', fill = 'deeppink4', alpha = .8)) +
theme_minimal() +
guides(color = FALSE, alpha = FALSE)
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'deeppink4', fill = 'deeppink4', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none')
?theme
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'plum', fill = 'plum', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none')
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'plum', fill = 'plum', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none')
# plotting y against predicted y from BART
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'plum')
# plotting y against predicted y from BART
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'magenta')
# plotting y against predicted y from BART
ggplot(mapping = aes(
x = BART_fit$yhat.train.mean,
y = simdata[[1]]$y
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon')
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'maroon', fill = 'maroon', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none')
# plotting y against predicted y from BART
pred <- tibble(simdata[[1]]$y = y,
?tibble
# plotting y against predicted y from BART
pred <- tibble(y = simdata[[1]]$y,
ypred = BART_fit$yhat.test.mean)
BART_fit$yhat.train.mean # train data fits
BART_fit$yhat.train.mean %>% class()
BART_fit$yhat.train.mean %>% length()
length(simdata[[1]]$y)
# plotting y against predicted y from BART
pred <- tibble(y = simdata[[1]]$y,
ypred = BART_fit$yhat.test.mean)
# plotting y against predicted y from BART
pred <- tibble(y = .simdata[[1]]$y,
ypred = .BART_fit$yhat.test.mean)
# plotting y against predicted y from BART
pred <- tibble(y = simdata[[1]]$y,
ypred = .BART_fit$yhat.test.mean)
# plotting y against predicted y from BART
pred <- tibble(y = simdata[[1]]$y,
ypred = BART_fit$yhat.test.mean)
# plotting y against predicted y from BART
pred <- tibble(simdata[[1]]$y, BART_fit$yhat.test.mean)
rlang::last_trace()
# plotting y against predicted y from BART
pred <- cbind(simdata[[1]]$y, BART_fit$yhat.test.mean)
View(pred)
# plotting y against predicted y from BART
pred <- matrix(c(simdata[[1]]$y, BART_fit$yhat.test.mean), ncol = 2)
?matrix
# plotting y against predicted y from BART
pred <- matrix(c(simdata[[1]]$y, BART_fit$yhat.test.mean),
ncol = 2,
dimnames = c('y', 'ypred'))
# plotting y against predicted y from BART
pred <- matrix(c(simdata[[1]]$y, BART_fit$yhat.test.mean),
ncol = 2,
dimnames = list('y', 'ypred'))
?colnames
# plotting y against predicted y from BART
pred <- matrix(c(simdata[[1]]$y, BART_fit$yhat.test.mean),
ncol = 2)
colnames(pred) <- c('y', 'ypred')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon')
?data.frame
pred <- data.frame(y = simdata[[1]]$y,
ypred = BART_fit$yhat.test.mean)
pred <- tibble(y = simdata[[1]]$y,
ypred = BART_fit$yhat.test.mean)
simdata[[1]]$y
BART_fit$yhat.test.mean
BART_fit$yhat.test.mean %>% as.numeric()
BART_fit$yhat.test.mean %>%
BART_fit$yhat.test.mean %>%
dgf
# plotting y against predicted y from BART
pred <- tibble(y = simdata[[1]]$y,
ypred = BART_fit$yhat.train.mean)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_density(alpha = .8)
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'maroon', fill = 'maroon', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none', fill = 'none')
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'blue', fill = 'blue', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none', fill = 'none')
ggplot() +
geom_density(mapping = aes(x = BART_fit$yhat.train.mean), color = 'deeppink', fill = 'deeppink', alpha = .8) +
geom_density(mapping = aes(x = simdata[[1]]$y, color = 'blue', fill = 'blue', alpha = .8)) +
theme_minimal() +
guides(color = 'none', alpha = 'none', fill = 'none')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon') +
geom_rug()
?geom_rug
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink3', fill = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon') +
geom_rug(color = 'deeppink')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'deeppink') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'maroon') +
geom_rug(color = 'deeppink')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue') +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'slateblue') +
geom_rug(color = 'royalblue')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = 1) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = 1, alpha = .7) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5, alpha = .7) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue')
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', size = .5)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .5)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .2)
ggplot(data = pred, mapping = aes(
x = y,
y = ypred
)) +
geom_point(color = 'royalblue', size = .5) +
theme_minimal() +
geom_abline(slope = 1, intercept = 0, color = 'royalblue4') +
geom_rug(color = 'royalblue', linewidth = .1)
install.packages('rstream')
instal.packa
install.packages('bartMachine')
library(bartMachine)
