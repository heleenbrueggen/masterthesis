---
title: "Missingness problem"
date: today
author: Heleen Br√ºggen
format:
  html:
    toc: true
    theme: default
    warning: false
    number-sections: true
    column-page: true
---
```{r}
#| label: libraries
#| messages: false
#| warnings: false
#| errors: false
#| echo: false
#############
# Libraries #
#############
library(furrr)
library(MASS)
library(mice)
library(magrittr)
library(purrr)
library(dplyr)
library(tibble)
library(readr)
library(naniar)
library(parallel)
library(knitr)
library(naniar)
library(ggplot2)
library(tidyr)
```

# Introduction
## Missingnes problem

In this manuscript I will explore the missingness problem in the data. Hopefully I can find a pattern in the missingness and find a way to solve it.

## To do 

1. Generate different data sets with different generating mechanisms 
    * take out all multilevel structure
    * 3 level-1 variables 
    * what happens when adding level-1 variables?
    * no cross-level interactions
    * no random slopes 
    * no random intercept
    * no random slopes and intercepts
    * no fixed level-2 effects
2. Different amount of missingness 
    * 5% missingness
    * 10% missingness
    * 20% missingness
    * 25% missingness
    * 30% missingness
    * 40% missingness
    * 50% missingness
    * 60% missingness
    * 70% missingness
    * 80% missingness
    * 90% missingness
3. Sample size
    * 100
    * 500
    * 1000
    * 5000
    * 10000
4. Change weights of variables
    * only x4 and z2
    * use default weights
    * significantly increase x4 and z2 (e.g. 10 times)
    * pick other variables (level-1)
    * pick other variables (level-2)
5. Change correlations between variables
6. Take out `group_by()`
7. Sample missing data patterns

# Data generating mechanisms 
## No multilevel structure
### Data generating mechanism
The following code is the generation of the data without any multilevel structure. 
```{r}
#| label: data_generating_mechanisms_no_multilevel
#| messages: false
#| code-fold: true
#| results: hold
################
# Setting seed #
################
set.seed(123)
###############################
# Simulating multilevel data  #
###############################
###############################################
# Function for calculating the variance of u0 #
###############################################
# Function for calculating the variance for a given correlation
covariance <- function(var1, var2, cor) {
  return(cor * sqrt(var1) * sqrt(var2))
}
# Function for calculating the variance of u0 for specific icc value
var.u0 <- function(t00, phiw, phib, gw, gb, T, sigma2, Sigma, icc) {
  daticc <- icc - ((t(gb) %*% phib %*% gb + t00)/ (t(gw) %*% phiw %*% gw + psych::tr(T %*% Sigma) + t00 + sigma2))

  return(daticc)
}
#######################
# Defining parameters #
#######################
ngroups <- c(30, 50)
groupsizes <- c(15, 50)
iccs <- c(0) # NO MULTILEVEL STRUCTURE
mar_mcar <- c("mar")
miss <- c(50)
g <- c(.5)
combinations <- expand.grid(
  ngroup = ngroups,
  groupsize = groupsizes,
  icc = iccs,
  mar_mcar = mar_mcar,
  miss = miss,
  g = g
)
###################
# Simulating data #
###################
simdata <- list()
for (i in seq_len(nrow(combinations))) {
  # Logging iteration
  cat("Processing iteration:", i, "\n")
  ngroup <- combinations$ngroup[i]
  groupsize <- combinations$groupsize[i]
  icc <- combinations$icc[i]
  # Overall intercept
  g00 <- 10
  # Individual effects
  g10 <- combinations$g[i]
  g20 <- combinations$g[i]
  g30 <- combinations$g[i]
  g40 <- combinations$g[i]
  g50 <- combinations$g[i]
  g60 <- combinations$g[i]
  g70 <- combinations$g[i]
  if (icc != 0) {
    g01 <- .5
    g02 <- .5
    g11 <- .35
    g21 <- .35
    g32 <- .35
  } else {
    g01 <- 0
    g02 <- 0
    g11 <- 0
    g21 <- 0
    g32 <- 0
  }

  # Defining matrices for icc calculation
  phiw <- matrix(c(
    6.25, 2.25, 1.5, 2.55, 1.5, 1.125, 3.3, 0, 0, 0,
    2.25, 9, 1.8, 3.06, 1.8, 1.35, 3.96, 0, 0, 0,
    1.5, 1.8, 4, 2.04, 1.2, .9, 2.64, 0, 0, 0,
    2.25, 3.06, 2.04, 11.56, 2.04, 1.53, 4.488, 0, 0, 0,
    1.5, 1.8, 1.2, 2.04, 4, .9, 2.64, 0, 0, 0,
    1.125, 1.35, 0.9, 1.53, .9, 2.25, 1.98, 0, 0, 0,
    3.3, 3.96, 2.64, 4.488, 2.64, 1.98, 19.36, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 6.25, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 9, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 10.24
  ), nrow = 10, ncol = 10, byrow = TRUE)

  phib <- matrix(c(
    0, 0, 0,
    0, 1, .48,
    0, .48, 2.56
  ), nrow = 3, ncol = 3, byrow = TRUE)

  gw <- c(g10, g20, g30, g40, g50, g60, g70, g11, g21, g32)
  gb <- c(g00, g01, g02)

  T <- matrix(c(
    1, .3, .3, .3, 0, 0, 0, 0,
    .3, 1, .3, .3, 0, 0, 0, 0,
    .3, .3, 1, .3, 0, 0, 0, 0,
    .3, .3, .3, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
  ), nrow = 8, ncol = 8)

  sigma2 <- 25
  Sigma <- matrix(c(
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 6.25, 2.25, 1.5, 2.55, 1.5, 1.125, 3.3,
    0, 2.25, 9, 1.8, 3.06, 1.8, 1.35, 3.96,
    0, 1.5, 1.8, 4, 2.04, 1.2, .9, 2.64,
    0, 2.25, 3.06, 2.04, 11.56, 2.04, 1.53, 4.488,
    0, 1.5, 1.8, 1.2, 2.04, 4, .9, 2.64,
    0, 1.125, 1.35, 0.9, 1.53, .9, 2.25, 1.98,
    0, 3.3, 3.96, 2.64, 4.488, 2.64, 1.98, 19.36
  ), nrow = 8, ncol = 8)

  if (icc != 0) {
    t00 <- uniroot(var.u0,
      interval = c(0, 100),
      tol = .00001,
      extendInt = "yes",
      maxiter = 1000,
      phiw = phiw,
      phib = phib,
      gw = gw,
      gb = gb,
      T = T,
      sigma2 = sigma2,
      Sigma = Sigma,
      icc = icc
    )$root
  } else {
    t00 <- 1
  }

  simdata[[i]] <- replicate(
    n = 5, # JUST 5 REPLICATIONS
    expr = data.frame(
      # individual id
      id = 1:(ngroup * groupsize),
      # group id
      group = rep(1:ngroup, each = groupsize),
      # residual variance
      eij = rnorm(n = ngroup * groupsize, mean = 0, sd = 5),
      mvrnorm(
        n = ngroup * groupsize, mu = rep(0, 7),
        Sigma = matrix(c(
          6.25, 2.25, 1.5, 2.55, 1.5, 1.125, 3.3,
          2.25, 9, 1.8, 3.06, 1.8, 1.35, 3.96,
          1.5, 1.8, 4, 2.04, 1.2, .9, 2.64,
          2.25, 3.06, 2.04, 11.56, 2.04, 1.53, 4.488,
          1.5, 1.8, 1.2, 2.04, 4, .9, 2.64,
          1.125, 1.35, 0.9, 1.53, .9, 2.25, 1.98,
          3.3, 3.96, 2.64, 4.488, 2.64, 1.98, 19.36
        ), nrow = 7, ncol = 7, byrow = TRUE)
      ) %>%
        as.data.frame() %>%
        rename(
          x1 = `V1`,
          x2 = `V2`,
          x3 = `V3`,
          x4 = `V4`,
          x5 = `V5`,
          x6 = `V6`,
          x7 = `V7`
        ),
      mvrnorm(
        n = ngroup, mu = rep(0, 2),
        Sigma = matrix(c(
          1, .48,
          .48, 2.56
        ), nrow = 2, ncol = 2, byrow = TRUE)
      ) %>%
        rep(each = groupsize) %>%
        matrix(ncol = 2) %>%
        as.data.frame() %>%
        rename(
          z1 = `V1`,
          z2 = `V2`
        ),
      mvrnorm(
        n = ngroup, mu = rep(0, 4),
        Sigma = matrix(c(
          t00, .3, .3, .3,
          .3, 1, .3, .3,
          .3, .3, 1, .3,
          .3, .3, .3, 1
        ), nrow = 4, ncol = 4, byrow = TRUE)
      ) %>%
        rep(each = groupsize) %>%
        matrix(ncol = 4) %>%
        as.data.frame() %>%
        rename(
          u0 = `V1`,
          u1 = `V2`,
          u2 = `V3`,
          u3 = `V4`,
        )
    ) %>%
      mutate( 
        u0 = if (icc != 0) {
          u0
        } else {
          0
        },
        u1 = if (icc != 0) {
          u1
        } else {
          0
        },
        u2 = if (icc != 0) {
          u2
        } else {
          0
        },
        u3 = if (icc != 0) {
          u3
        } else {
          0
        },
        # coefficient generation (including random slopes and cross-level interactions)
        beta0j = g00 + g01 * z1 + g02 * z2 + u0,
        beta1j = g10 + g11 * z1 + u1,
        beta2j = g20 + g21 * z1 + u2,
        beta3j = g30 + g32 * z2 + u3,
        beta4j = g40,
        beta5j = g50,
        beta6j = g60,
        beta7j = g70,
        # generation of dependent variable y
        y = beta0j + beta1j * x1 + beta2j * x2 + beta3j * x3 + beta4j * x4 + beta5j * x5 + beta6j * x6 + beta7j * x7 + eij
      ) %>%
      # taking out terms that are only used for model generation
      # select(-u0, -u1, -u2, -u3, -eij, -beta0j, -beta1j, -beta2j, -beta3j, -beta4j, -beta5j, -beta6j, -beta7j) %>%
      as_tibble(),
    simplify = FALSE
  )

  name <- paste("simdata",
    colnames(combinations)[1], combinations[i, 1],
    colnames(combinations)[2], combinations[i, 2],
    colnames(combinations)[3], combinations[i, 3],
    colnames(combinations)[4], combinations[i, 4],
    colnames(combinations)[5], combinations[i, 5],
    colnames(combinations)[6], combinations[i, 6],
    sep = "_"
  )
  
}
```

### Missingness
The next code introduces missingness in the data. This codes results in many warnings messages saying that there is only 1 candidate for certain patterns and that some patterns are not used. 
```{r}
#| label: missingess_no_multilevel
#| warnings: false
#| error: false
#| messages: false
#| code-fold: true
#| results: hold
############################
# Plan parallel processing #
############################
plan(multisession, workers = 5)
##########################
# Model based simulation #
##########################
# Defining patterns for missing mechanism
patterns <- expand.grid(c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1)) %>%
  filter(rowSums(.) == 9 | rowSums(.) == 8 | rowSums(.) == 7 | rowSums(.) == 6 | rowSums(.) == 5) %>%
  as.matrix()
colnames(patterns) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "z1", "z2", "y")

# Determining the frequency of each pattern
freq <- ampute.default.freq(patterns)

# Determining the weights of each pattern
weights <- ampute.default.weights(patterns, "MAR")
colnames(weights) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "z1", "z2", "y")
weights[,"z2"] <- weights[,"z2"] * 1.5
weights[,"x4"] <- weights[,"x4"] * 2

simdata_miss <- list()
# Generating missing data
for (i in seq_len(nrow(combinations))) {
  # Logging iteration
  cat("Processing iteration:", i, "\n")
  
  # Generating missing data
  if (combinations[i, "mar_mcar"] == "mcar") {
    simdata_miss[[i]] <-
      simdata[[i]] %>%
      future_map(function(x) {
        others <- x %>% select(-x1, -x2, -x3, -x4, -x5, -x6, -x7, -z1, -z2, -y)
        x %>%
          select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>%
          group_by(z1) %>%
          ampute(
            prop = (combinations[i, "miss"] * .01),
            mech = "MCAR",
            patterns = patterns,
            freq = freq
          ) %>%
          .$amp %>%
          ungroup() %>%
          cbind(., others)
      }, .options = furrr_options(seed = 123), .progress = TRUE)
  } else {
    simdata_miss[[i]] <-
      simdata[[i]] %>%
      future_map(function(x) {
        others <- x %>% select(-x1, -x2, -x3, -x4, -x5, -x6, -x7, -z1, -z2, -y)
        x %>%
          select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>%
          group_by(z1) %>%
          ampute(
            prop = (combinations[i, "miss"] * .01),
            mech = "MAR",
            type = "RIGHT",
            patterns = patterns,
            freq = freq,
            weights = weights
          ) %>%
          .$amp %>%
          ungroup() %>%
          cbind(., others)
      }, .options = furrr_options(seed = 123), .progress = TRUE)
  }
}
############################
# Stop parallel processing #
############################
plan(sequential)
```

### MCAR testing
Testing for MCAR 
```{r}
#| label: tbl-testing_mcar_no_multilevel
#| code-fold: true
#| results: hold
############################
# Plan parallel processing #
############################
plan(multisession, workers = 5)
################
# Testing MCAR #
################
missingness <- list()
for (i in seq_len(nrow(combinations))) {
    simdata_miss[[i]] <- simdata_miss[[i]] %>% map(., \(x) x %>% dplyr::select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y))
    missingness[[i]] <- future_map(simdata_miss[[i]], mcar_test, .options = furrr_options(seed = 123), .progress = TRUE) %>%
        Reduce("+", .) / length(simdata_miss[[i]])
}
missingness <- missingness %>% map(., ~ as_tibble(.x)) # convert to tibble
missingness %>%
    list_rbind() %>%
    kable(caption = "MCAR test results no multilevel structure", align = "l")
############################
# Stop parallel processing #
############################
plan(sequential)
```

```{r}
#| label: fig-testing_mcar_no_multilevel
#| echo: false
#| layout: "[1, 1]"
#| column: page
###########################
# Visualizing missingness #
###########################
for (i in seq_len(nrow(combinations))) {
    # Complete data
    print(ggplot(simdata[[i]][[1]] %>% select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>% pivot_longer(c(x1, x2, x3, x4, x5, x6, x7, z1, z2, y)), aes(x = value)) +
        geom_histogram(aes(y = after_stat(density)), fill = "dodgerblue", alpha = .8) +
        geom_density(color = "dodgerblue4") +
        facet_wrap(~name, scales = "free") +
        theme_minimal() +
        labs(title = paste0("Complete data combination ", i)))
    # Missing data
    print(ggplot(simdata[[i]][[1]] %>% select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>% pivot_longer(c(x1, x2, x3, x4, x5, x6, x7, z1, z2, y)), aes(x = value)) +
        geom_histogram(aes(y = after_stat(density)), fill = "firebrick3", alpha = .8) +
        geom_density(color = "firebrick4") +
        facet_wrap(~name, scales = "free") +
        theme_minimal() +
        labs(title = paste0("Missing data combination ", i)))
}
```

It seems that only the fourth data set has missing data that is MAR. The other loops are supposedly MCAR. Notably, loop 4 has the largerst total sample size. 
```{r} 
#| label: combinations_no_multilevel
#| echo: false
combinations %>% kable(caption = "Combinations no multilevel structure", align = 'l')
```

# Amount of missingness 

# Sample size

# Weights of variables

# Correlations between variables

# Take out `group_by()`
### Data generating mechanism
The following code is the generation of the data
```{r}
#| label: data_generating_mechanisms_no_group_by
#| messages: false
#| code-fold: true
#| results: hold
################
# Setting seed #
################
set.seed(123)
###############################
# Simulating multilevel data  #
###############################
###############################################
# Function for calculating the variance of u0 #
###############################################
# Function for calculating the variance for a given correlation
covariance <- function(var1, var2, cor) {
  return(cor * sqrt(var1) * sqrt(var2))
}
# Function for calculating the variance of u0 for specific icc value
var.u0 <- function(t00, phiw, phib, gw, gb, T, sigma2, Sigma, icc) {
  daticc <- icc - ((t(gb) %*% phib %*% gb + t00)/ (t(gw) %*% phiw %*% gw + psych::tr(T %*% Sigma) + t00 + sigma2))

  return(daticc)
}
#######################
# Defining parameters #
#######################
ngroups <- c(30, 50)
groupsizes <- c(15, 50)
iccs <- c(.5)
mar_mcar <- c("mar")
miss <- c(50)
g <- c(.5)
combinations <- expand.grid(
  ngroup = ngroups,
  groupsize = groupsizes,
  icc = iccs,
  mar_mcar = mar_mcar,
  miss = miss,
  g = g
)
###################
# Simulating data #
###################
simdata <- list()
for (i in seq_len(nrow(combinations))) {
  # Logging iteration
  cat("Processing iteration:", i, "\n")
  ngroup <- combinations$ngroup[i]
  groupsize <- combinations$groupsize[i]
  icc <- combinations$icc[i]
  # Overall intercept
  g00 <- 10
  # Individual effects
  g10 <- combinations$g[i]
  g20 <- combinations$g[i]
  g30 <- combinations$g[i]
  g40 <- combinations$g[i]
  g50 <- combinations$g[i]
  g60 <- combinations$g[i]
  g70 <- combinations$g[i]
  if (icc != 0) {
    g01 <- .5
    g02 <- .5
    g11 <- .35
    g21 <- .35
    g32 <- .35
  } else {
    g01 <- 0
    g02 <- 0
    g11 <- 0
    g21 <- 0
    g32 <- 0
  }

  # Defining matrices for icc calculation
  phiw <- matrix(c(
    6.25, 2.25, 1.5, 2.55, 1.5, 1.125, 3.3, 0, 0, 0,
    2.25, 9, 1.8, 3.06, 1.8, 1.35, 3.96, 0, 0, 0,
    1.5, 1.8, 4, 2.04, 1.2, .9, 2.64, 0, 0, 0,
    2.25, 3.06, 2.04, 11.56, 2.04, 1.53, 4.488, 0, 0, 0,
    1.5, 1.8, 1.2, 2.04, 4, .9, 2.64, 0, 0, 0,
    1.125, 1.35, 0.9, 1.53, .9, 2.25, 1.98, 0, 0, 0,
    3.3, 3.96, 2.64, 4.488, 2.64, 1.98, 19.36, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 6.25, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 9, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 10.24
  ), nrow = 10, ncol = 10, byrow = TRUE)

  phib <- matrix(c(
    0, 0, 0,
    0, 1, .48,
    0, .48, 2.56
  ), nrow = 3, ncol = 3, byrow = TRUE)

  gw <- c(g10, g20, g30, g40, g50, g60, g70, g11, g21, g32)
  gb <- c(g00, g01, g02)

  T <- matrix(c(
    1, .3, .3, .3, 0, 0, 0, 0,
    .3, 1, .3, .3, 0, 0, 0, 0,
    .3, .3, 1, .3, 0, 0, 0, 0,
    .3, .3, .3, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
  ), nrow = 8, ncol = 8)

  sigma2 <- 25
  Sigma <- matrix(c(
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 6.25, 2.25, 1.5, 2.55, 1.5, 1.125, 3.3,
    0, 2.25, 9, 1.8, 3.06, 1.8, 1.35, 3.96,
    0, 1.5, 1.8, 4, 2.04, 1.2, .9, 2.64,
    0, 2.25, 3.06, 2.04, 11.56, 2.04, 1.53, 4.488,
    0, 1.5, 1.8, 1.2, 2.04, 4, .9, 2.64,
    0, 1.125, 1.35, 0.9, 1.53, .9, 2.25, 1.98,
    0, 3.3, 3.96, 2.64, 4.488, 2.64, 1.98, 19.36
  ), nrow = 8, ncol = 8)

  if (icc != 0) {
    t00 <- uniroot(var.u0,
      interval = c(0, 100),
      tol = .00001,
      extendInt = "yes",
      maxiter = 1000,
      phiw = phiw,
      phib = phib,
      gw = gw,
      gb = gb,
      T = T,
      sigma2 = sigma2,
      Sigma = Sigma,
      icc = icc
    )$root
  } else {
    t00 <- 1
  }

  simdata[[i]] <- replicate(
    n = 5, # JUST 5 REPLICATIONS
    expr = data.frame(
      # individual id
      id = 1:(ngroup * groupsize),
      # group id
      group = rep(1:ngroup, each = groupsize),
      # residual variance
      eij = rnorm(n = ngroup * groupsize, mean = 0, sd = 5),
      mvrnorm(
        n = ngroup * groupsize, mu = rep(0, 7),
        Sigma = matrix(c(
          6.25, 2.25, 1.5, 2.55, 1.5, 1.125, 3.3,
          2.25, 9, 1.8, 3.06, 1.8, 1.35, 3.96,
          1.5, 1.8, 4, 2.04, 1.2, .9, 2.64,
          2.25, 3.06, 2.04, 11.56, 2.04, 1.53, 4.488,
          1.5, 1.8, 1.2, 2.04, 4, .9, 2.64,
          1.125, 1.35, 0.9, 1.53, .9, 2.25, 1.98,
          3.3, 3.96, 2.64, 4.488, 2.64, 1.98, 19.36
        ), nrow = 7, ncol = 7, byrow = TRUE)
      ) %>%
        as.data.frame() %>%
        rename(
          x1 = `V1`,
          x2 = `V2`,
          x3 = `V3`,
          x4 = `V4`,
          x5 = `V5`,
          x6 = `V6`,
          x7 = `V7`
        ),
      mvrnorm(
        n = ngroup, mu = rep(0, 2),
        Sigma = matrix(c(
          1, .48,
          .48, 2.56
        ), nrow = 2, ncol = 2, byrow = TRUE)
      ) %>%
        rep(each = groupsize) %>%
        matrix(ncol = 2) %>%
        as.data.frame() %>%
        rename(
          z1 = `V1`,
          z2 = `V2`
        ),
      mvrnorm(
        n = ngroup, mu = rep(0, 4),
        Sigma = matrix(c(
          t00, .3, .3, .3,
          .3, 1, .3, .3,
          .3, .3, 1, .3,
          .3, .3, .3, 1
        ), nrow = 4, ncol = 4, byrow = TRUE)
      ) %>%
        rep(each = groupsize) %>%
        matrix(ncol = 4) %>%
        as.data.frame() %>%
        rename(
          u0 = `V1`,
          u1 = `V2`,
          u2 = `V3`,
          u3 = `V4`,
        )
    ) %>%
      mutate( 
        u0 = if (icc != 0) {
          u0
        } else {
          0
        },
        u1 = if (icc != 0) {
          u1
        } else {
          0
        },
        u2 = if (icc != 0) {
          u2
        } else {
          0
        },
        u3 = if (icc != 0) {
          u3
        } else {
          0
        },
        # coefficient generation (including random slopes and cross-level interactions)
        beta0j = g00 + g01 * z1 + g02 * z2 + u0,
        beta1j = g10 + g11 * z1 + u1,
        beta2j = g20 + g21 * z1 + u2,
        beta3j = g30 + g32 * z2 + u3,
        beta4j = g40,
        beta5j = g50,
        beta6j = g60,
        beta7j = g70,
        # generation of dependent variable y
        y = beta0j + beta1j * x1 + beta2j * x2 + beta3j * x3 + beta4j * x4 + beta5j * x5 + beta6j * x6 + beta7j * x7 + eij
      ) %>%
      # taking out terms that are only used for model generation
      # select(-u0, -u1, -u2, -u3, -eij, -beta0j, -beta1j, -beta2j, -beta3j, -beta4j, -beta5j, -beta6j, -beta7j) %>%
      as_tibble(),
    simplify = FALSE
  )

  name <- paste("simdata",
    colnames(combinations)[1], combinations[i, 1],
    colnames(combinations)[2], combinations[i, 2],
    colnames(combinations)[3], combinations[i, 3],
    colnames(combinations)[4], combinations[i, 4],
    colnames(combinations)[5], combinations[i, 5],
    colnames(combinations)[6], combinations[i, 6],
    sep = "_"
  )
  
}
```

### Missingness
The next code introduces missingness in the data without the grouping code `group_by()`. This codes results in many warnings messages saying that there is only 1 candidate for certain patterns and that some patterns are not used. 
```{r}
#| label: missingess_no_group_by
#| warnings: false
#| error: false
#| messages: false
#| code-fold: true
#| results: hold
############################
# Plan parallel processing #
############################
plan(multisession, workers = 5)
##########################
# Model based simulation #
##########################
# Defining patterns for missing mechanism
patterns <- expand.grid(c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1)) %>%
  filter(rowSums(.) == 9 | rowSums(.) == 8 | rowSums(.) == 7 | rowSums(.) == 6 | rowSums(.) == 5) %>%
  as.matrix()
colnames(patterns) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "z1", "z2", "y")

# Determining the frequency of each pattern
freq <- ampute.default.freq(patterns)

# Determining the weights of each pattern
weights <- ampute.default.weights(patterns, "MAR")
colnames(weights) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "z1", "z2", "y")
weights[,"z2"] <- weights[,"z2"] * 1.5
weights[,"x4"] <- weights[,"x4"] * 2

simdata_miss <- list()
# Generating missing data
for (i in seq_len(nrow(combinations))) {
  # Logging iteration
  cat("Processing iteration:", i, "\n")
  
  # Generating missing data
  if (combinations[i, "mar_mcar"] == "mcar") {
    simdata_miss[[i]] <-
      simdata[[i]] %>%
      future_map(function(x) {
        x %>%
          select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>%
          ampute(
            prop = (combinations[i, "miss"] * .01),
            mech = "MCAR",
            patterns = patterns,
            freq = freq
          )
      }, .options = furrr_options(seed = 123), .progress = TRUE)
  } else {
    simdata_miss[[i]] <-
      simdata[[i]] %>%
      future_map(function(x) {
        x %>%
          select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>%
          ampute(
            prop = (combinations[i, "miss"] * .01),
            mech = "MAR",
            type = "RIGHT",
            patterns = patterns,
            freq = freq,
            weights = weights
          )
      }, .options = furrr_options(seed = 123), .progress = TRUE)
  }
}
############################
# Stop parallel processing #
############################
plan(sequential)
```

### MCAR testing
Testing for MCAR 
```{r}
#| label: tbl-testing_mcar_no_group_by
#| results: hold
#| code-fold: true
############################
# Plan parallel processing #
############################
plan(multisession, workers = 5)
################
# Testing MCAR #
################
missingness <- list()
for (i in seq_len(nrow(combinations))) {
    missingness[[i]] <- future_map(simdata_miss[[i]], \(x) mcar_test(x$amp), .options = furrr_options(seed = 123), .progress = TRUE) %>%
        Reduce("+", .) / length(simdata_miss[[i]])
}
missingness <- missingness %>% map(., ~ as_tibble(.x)) # convert to tibble
missingness %>%
    list_rbind() %>%
    kable(caption = "MCAR test results no group_by()", align = "l")
############################
# Stop parallel processing #
############################
plan(sequential)
```

```{r}
#| label: fig-testing_mcar_no_group_by
#| echo: false
#| layout: "[1, 1]"
#| column: page
###########################
# Visualizing missingness #
###########################
for (i in seq_len(nrow(combinations))) {
    # Complete data
    print(ggplot(simdata_miss[[i]][[1]]$data %>% select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>% pivot_longer(c(x1, x2, x3, x4, x5, x6, x7, z1, z2, y)), aes(x = value)) +
        geom_histogram(aes(y = after_stat(density)), fill = "dodgerblue", alpha = .8) +
        geom_density(color = "dodgerblue4") +
        facet_wrap(~name, scales = "free") +
        theme_minimal() +
        labs(title = paste0("Complete data combination ", i)))
    # Missing data
    print(ggplot(simdata_miss[[i]][[1]]$amp %>% select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>% pivot_longer(c(x1, x2, x3, x4, x5, x6, x7, z1, z2, y)), aes(x = value)) +
        geom_histogram(aes(y = after_stat(density)), fill = "firebrick3", alpha = .8) +
        geom_density(color = "firebrick4") +
        facet_wrap(~name, scales = "free") +
        theme_minimal() +
        labs(title = paste0("Missing data combination ", i)))
}
```

```{r} 
#| label: combinations_no_group_by
#| echo: false
combinations %>% kable(caption = "Combinations", align = 'l')
```

Again, only the fourth combinations seemse to be MAR.

# Missing data patterns
## 100 missing data patterns
### Data generating mechanism
The following code is the generation of the data
```{r}
#| label: data_generating_mechanisms_100patterns
#| messages: false
#| code-fold: true
#| results: hold
################
# Setting seed #
################
set.seed(123)
###############################
# Simulating multilevel data  #
###############################
###############################################
# Function for calculating the variance of u0 #
###############################################
# Function for calculating the variance for a given correlation
covariance <- function(var1, var2, cor) {
  return(cor * sqrt(var1) * sqrt(var2))
}
# Function for calculating the variance of u0 for specific icc value
var.u0 <- function(t00, phiw, phib, gw, gb, T, sigma2, Sigma, icc) {
  daticc <- icc - ((t(gb) %*% phib %*% gb + t00)/ (t(gw) %*% phiw %*% gw + psych::tr(T %*% Sigma) + t00 + sigma2))

  return(daticc)
}
#######################
# Defining parameters #
#######################
ngroups <- c(30, 50)
groupsizes <- c(15, 50)
iccs <- c(0.5)
mar_mcar <- c("mar")
miss <- c(50)
g <- c(.5)
combinations <- expand.grid(
  ngroup = ngroups,
  groupsize = groupsizes,
  icc = iccs,
  mar_mcar = mar_mcar,
  miss = miss,
  g = g
)
###################
# Simulating data #
###################
simdata <- list()
for (i in seq_len(nrow(combinations))) {
  # Logging iteration
  cat("Processing iteration:", i, "\n")
  ngroup <- combinations$ngroup[i]
  groupsize <- combinations$groupsize[i]
  icc <- combinations$icc[i]
  # Overall intercept
  g00 <- 10
  # Individual effects
  g10 <- combinations$g[i]
  g20 <- combinations$g[i]
  g30 <- combinations$g[i]
  g40 <- combinations$g[i]
  g50 <- combinations$g[i]
  g60 <- combinations$g[i]
  g70 <- combinations$g[i]
  if (icc != 0) {
    g01 <- .5
    g02 <- .5
    g11 <- .35
    g21 <- .35
    g32 <- .35
  } else {
    g01 <- 0
    g02 <- 0
    g11 <- 0
    g21 <- 0
    g32 <- 0
  }

  # Defining matrices for icc calculation
  phiw <- matrix(c(
    6.25, 2.25, 1.5, 2.55, 1.5, 1.125, 3.3, 0, 0, 0,
    2.25, 9, 1.8, 3.06, 1.8, 1.35, 3.96, 0, 0, 0,
    1.5, 1.8, 4, 2.04, 1.2, .9, 2.64, 0, 0, 0,
    2.25, 3.06, 2.04, 11.56, 2.04, 1.53, 4.488, 0, 0, 0,
    1.5, 1.8, 1.2, 2.04, 4, .9, 2.64, 0, 0, 0,
    1.125, 1.35, 0.9, 1.53, .9, 2.25, 1.98, 0, 0, 0,
    3.3, 3.96, 2.64, 4.488, 2.64, 1.98, 19.36, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 6.25, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 9, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 10.24
  ), nrow = 10, ncol = 10, byrow = TRUE)

  phib <- matrix(c(
    0, 0, 0,
    0, 1, .48,
    0, .48, 2.56
  ), nrow = 3, ncol = 3, byrow = TRUE)

  gw <- c(g10, g20, g30, g40, g50, g60, g70, g11, g21, g32)
  gb <- c(g00, g01, g02)

  T <- matrix(c(
    1, .3, .3, .3, 0, 0, 0, 0,
    .3, 1, .3, .3, 0, 0, 0, 0,
    .3, .3, 1, .3, 0, 0, 0, 0,
    .3, .3, .3, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
  ), nrow = 8, ncol = 8)

  sigma2 <- 25
  Sigma <- matrix(c(
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 6.25, 2.25, 1.5, 2.55, 1.5, 1.125, 3.3,
    0, 2.25, 9, 1.8, 3.06, 1.8, 1.35, 3.96,
    0, 1.5, 1.8, 4, 2.04, 1.2, .9, 2.64,
    0, 2.25, 3.06, 2.04, 11.56, 2.04, 1.53, 4.488,
    0, 1.5, 1.8, 1.2, 2.04, 4, .9, 2.64,
    0, 1.125, 1.35, 0.9, 1.53, .9, 2.25, 1.98,
    0, 3.3, 3.96, 2.64, 4.488, 2.64, 1.98, 19.36
  ), nrow = 8, ncol = 8)

  if (icc != 0) {
    t00 <- uniroot(var.u0,
      interval = c(0, 100),
      tol = .00001,
      extendInt = "yes",
      maxiter = 1000,
      phiw = phiw,
      phib = phib,
      gw = gw,
      gb = gb,
      T = T,
      sigma2 = sigma2,
      Sigma = Sigma,
      icc = icc
    )$root
  } else {
    t00 <- 1
  }

  simdata[[i]] <- replicate(
    n = 5, # JUST 5 REPLICATIONS
    expr = data.frame(
      # individual id
      id = 1:(ngroup * groupsize),
      # group id
      group = rep(1:ngroup, each = groupsize),
      # residual variance
      eij = rnorm(n = ngroup * groupsize, mean = 0, sd = 5),
      mvrnorm(
        n = ngroup * groupsize, mu = rep(0, 7),
        Sigma = matrix(c(
          6.25, 2.25, 1.5, 2.55, 1.5, 1.125, 3.3,
          2.25, 9, 1.8, 3.06, 1.8, 1.35, 3.96,
          1.5, 1.8, 4, 2.04, 1.2, .9, 2.64,
          2.25, 3.06, 2.04, 11.56, 2.04, 1.53, 4.488,
          1.5, 1.8, 1.2, 2.04, 4, .9, 2.64,
          1.125, 1.35, 0.9, 1.53, .9, 2.25, 1.98,
          3.3, 3.96, 2.64, 4.488, 2.64, 1.98, 19.36
        ), nrow = 7, ncol = 7, byrow = TRUE)
      ) %>%
        as.data.frame() %>%
        rename(
          x1 = `V1`,
          x2 = `V2`,
          x3 = `V3`,
          x4 = `V4`,
          x5 = `V5`,
          x6 = `V6`,
          x7 = `V7`
        ),
      mvrnorm(
        n = ngroup, mu = rep(0, 2),
        Sigma = matrix(c(
          1, .48,
          .48, 2.56
        ), nrow = 2, ncol = 2, byrow = TRUE)
      ) %>%
        rep(each = groupsize) %>%
        matrix(ncol = 2) %>%
        as.data.frame() %>%
        rename(
          z1 = `V1`,
          z2 = `V2`
        ),
      mvrnorm(
        n = ngroup, mu = rep(0, 4),
        Sigma = matrix(c(
          t00, .3, .3, .3,
          .3, 1, .3, .3,
          .3, .3, 1, .3,
          .3, .3, .3, 1
        ), nrow = 4, ncol = 4, byrow = TRUE)
      ) %>%
        rep(each = groupsize) %>%
        matrix(ncol = 4) %>%
        as.data.frame() %>%
        rename(
          u0 = `V1`,
          u1 = `V2`,
          u2 = `V3`,
          u3 = `V4`,
        )
    ) %>%
      mutate( 
        u0 = if (icc != 0) {
          u0
        } else {
          0
        },
        u1 = if (icc != 0) {
          u1
        } else {
          0
        },
        u2 = if (icc != 0) {
          u2
        } else {
          0
        },
        u3 = if (icc != 0) {
          u3
        } else {
          0
        },
        # coefficient generation (including random slopes and cross-level interactions)
        beta0j = g00 + g01 * z1 + g02 * z2 + u0,
        beta1j = g10 + g11 * z1 + u1,
        beta2j = g20 + g21 * z1 + u2,
        beta3j = g30 + g32 * z2 + u3,
        beta4j = g40,
        beta5j = g50,
        beta6j = g60,
        beta7j = g70,
        # generation of dependent variable y
        y = beta0j + beta1j * x1 + beta2j * x2 + beta3j * x3 + beta4j * x4 + beta5j * x5 + beta6j * x6 + beta7j * x7 + eij
      ) %>%
      # taking out terms that are only used for model generation
      # select(-u0, -u1, -u2, -u3, -eij, -beta0j, -beta1j, -beta2j, -beta3j, -beta4j, -beta5j, -beta6j, -beta7j) %>%
      as_tibble(),
    simplify = FALSE
  )

  name <- paste("simdata",
    colnames(combinations)[1], combinations[i, 1],
    colnames(combinations)[2], combinations[i, 2],
    colnames(combinations)[3], combinations[i, 3],
    colnames(combinations)[4], combinations[i, 4],
    colnames(combinations)[5], combinations[i, 5],
    colnames(combinations)[6], combinations[i, 6],
    sep = "_"
  )
  
}
```

### Missingness
The next code introduces missingness in the data. This codes results in many warnings messages saying that there is only 1 candidate for certain patterns and that some patterns are not used. 
```{r}
#| label: missingess_no_multilevel_100patterns
#| warnings: false
#| error: false
#| messages: false
#| code-fold: true
#| results: hold
############################
# Plan parallel processing #
############################
plan(multisession, workers = 5)
##########################
# Model based simulation #
##########################
# Defining patterns for missing mechanism
patterns <- expand.grid(c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1), c(0, 1)) %>%
  filter(rowSums(.) == 9 | rowSums(.) == 8 | rowSums(.) == 7 | rowSums(.) == 6 | rowSums(.) == 5) %>%
  as.matrix()
colnames(patterns) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "z1", "z2", "y")
patterns <- patterns[sample(nrow(patterns), 100, replace = FALSE), ]

# Determining the frequency of each pattern
freq <- ampute.default.freq(patterns)

# Determining the weights of each pattern
weights <- ampute.default.weights(patterns, "MAR")
colnames(weights) <- c("x1", "x2", "x3", "x4", "x5", "x6", "x7", "z1", "z2", "y")
weights[,"z2"] <- weights[,"z2"] * 1.5
weights[,"x4"] <- weights[,"x4"] * 2

simdata_miss <- list()
# Generating missing data
for (i in seq_len(nrow(combinations))) {
  # Logging iteration
  cat("Processing iteration:", i, "\n")
  
  # Generating missing data
  if (combinations[i, "mar_mcar"] == "mcar") {
    simdata_miss[[i]] <-
      simdata[[i]] %>%
      future_map(function(x) {
        others <- x %>% select(-x1, -x2, -x3, -x4, -x5, -x6, -x7, -z1, -z2, -y)
        x %>%
          select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>%
          group_by(z1) %>%
          ampute(
            prop = (combinations[i, "miss"] * .01),
            mech = "MCAR",
            patterns = patterns,
            freq = freq
          ) %>%
          .$amp %>%
          ungroup() %>%
          cbind(., others)
      }, .options = furrr_options(seed = 123), .progress = TRUE)
  } else {
    simdata_miss[[i]] <-
      simdata[[i]] %>%
      future_map(function(x) {
        others <- x %>% select(-x1, -x2, -x3, -x4, -x5, -x6, -x7, -z1, -z2, -y)
        x %>%
          select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>%
          group_by(z1) %>%
          ampute(
            prop = (combinations[i, "miss"] * .01),
            mech = "MAR",
            type = "RIGHT",
            patterns = patterns,
            freq = freq,
            weights = weights
          ) %>%
          .$amp %>%
          ungroup() %>%
          cbind(., others)
      }, .options = furrr_options(seed = 123), .progress = TRUE)
  }
}
############################
# Stop parallel processing #
############################
plan(sequential)
```

### MCAR testing
Testing for MCAR 
```{r}
#| label: tbl-testing_mcar_100patterns
#| code-fold: true
#| results: hold
############################
# Plan parallel processing #
############################
plan(multisession, workers = 5)
################
# Testing MCAR #
################
missingness <- list()
for (i in seq_len(nrow(combinations))) {
    simdata_miss[[i]] <- simdata_miss[[i]] %>% map(., \(x) x %>% dplyr::select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y))
    missingness[[i]] <- future_map(simdata_miss[[i]], mcar_test, .options = furrr_options(seed = 123), .progress = TRUE) %>%
        Reduce("+", .) / length(simdata_miss[[i]])
}
missingness <- missingness %>% map(., ~ as_tibble(.x)) # convert to tibble
missingness %>%
    list_rbind() %>%
    kable(caption = "MCAR test results 100 missing data patterns", align = "l")
############################
# Stop parallel processing #
############################
plan(sequential)
```

```{r}
#| label: fig-testing_mcar_100patterns
#| echo: false
#| layout: "[1, 1]"
#| column: page
###########################
# Visualizing missingness #
###########################
for (i in seq_len(nrow(combinations))) {
    # Complete data
    print(ggplot(simdata[[i]][[1]] %>% select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>% pivot_longer(c(x1, x2, x3, x4, x5, x6, x7, z1, z2, y)), aes(x = value)) +
        geom_histogram(aes(y = after_stat(density)), fill = "dodgerblue", alpha = .8) +
        geom_density(color = "dodgerblue4") +
        facet_wrap(~name, scales = "free") +
        theme_minimal() +
        labs(title = paste0("Complete data combination ", i)))
    # Missing data
    print(ggplot(simdata[[i]][[1]] %>% select(x1, x2, x3, x4, x5, x6, x7, z1, z2, y) %>% pivot_longer(c(x1, x2, x3, x4, x5, x6, x7, z1, z2, y)), aes(x = value)) +
        geom_histogram(aes(y = after_stat(density)), fill = "firebrick3", alpha = .8) +
        geom_density(color = "firebrick4") +
        facet_wrap(~name, scales = "free") +
        theme_minimal() +
        labs(title = paste0("Missing data combination ", i)))
}
```

Now, only the first combinations seems NOT to be MAR.
```{r} 
#| label: combinations_100patterns
#| echo: false
combinations %>% kable(caption = "Combinations no multilevel structure", align = 'l')
```